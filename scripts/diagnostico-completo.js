const { Pool } = require('pg');
require('dotenv').config();

// Configura√ß√£o do banco de dados
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function diagnosticoCompleto() {
  const client = await pool.connect();
  
  try {
    console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO DO SISTEMA');
    console.log('=============================================\n');
    
    // 1. Verificar conex√£o com banco
    console.log('1Ô∏è‚É£ Testando conex√£o com banco de dados...');
    const versionResult = await client.query('SELECT version()');
    console.log('‚úÖ Conex√£o com banco estabelecida');
    console.log(`üìä Vers√£o PostgreSQL: ${versionResult.rows[0].version.split(' ')[1]}\n`);
    
    // 2. Verificar estrutura da tabela users
    console.log('2Ô∏è‚É£ Verificando estrutura da tabela users...');
    const userColumnsResult = await client.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      ORDER BY ordinal_position
    `);
    
    const userColumns = userColumnsResult.rows.map(row => row.column_name);
    console.log('üìã Colunas encontradas na tabela users:');
    userColumns.forEach(col => console.log(`   - ${col}`));
    
    // Verificar campos LGPD
    const camposLGPD = ['consent_marketing', 'consent_third_party'];
    const camposFaltando = camposLGPD.filter(campo => !userColumns.includes(campo));
    
    if (camposFaltando.length > 0) {
      console.log(`‚ùå Campos LGPD faltando: ${camposFaltando.join(', ')}`);
    } else {
      console.log('‚úÖ Todos os campos LGPD presentes');
    }
    console.log('');
    
    // 3. Verificar tabela lgpd_audit
    console.log('3Ô∏è‚É£ Verificando tabela lgpd_audit...');
    const auditTableResult = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'lgpd_audit'
      )
    `);
    
    if (auditTableResult.rows[0].exists) {
      console.log('‚úÖ Tabela lgpd_audit existe');
    } else {
      console.log('‚ùå Tabela lgpd_audit n√£o existe');
    }
    console.log('');
    
    // 4. Verificar produtos
    console.log('4Ô∏è‚É£ Verificando produtos...');
    const productsResult = await client.query('SELECT COUNT(*) as total FROM products WHERE active = true');
    console.log(`üì¶ Total de produtos ativos: ${productsResult.rows[0].total}`);
    
    const productsWithImages = await client.query(`
      SELECT COUNT(*) as total 
      FROM products 
      WHERE active = true AND image IS NOT NULL AND image != ''
    `);
    console.log(`üñºÔ∏è Produtos com imagens: ${productsWithImages.rows[0].total}`);
    console.log('');
    
    // 5. Verificar usu√°rios
    console.log('5Ô∏è‚É£ Verificando usu√°rios...');
    const usersResult = await client.query('SELECT COUNT(*) as total FROM users WHERE active = true');
    console.log(`üë• Total de usu√°rios ativos: ${usersResult.rows[0].total}`);
    console.log('');
    
    // 6. Aplicar corre√ß√µes necess√°rias
    console.log('6Ô∏è‚É£ Aplicando corre√ß√µes necess√°rias...');
    
    // Adicionar campos LGPD se n√£o existirem
    if (camposFaltando.length > 0) {
      console.log('üîß Adicionando campos LGPD...');
      for (const campo of camposFaltando) {
        await client.query(`ALTER TABLE users ADD COLUMN ${campo} BOOLEAN DEFAULT FALSE`);
        console.log(`   ‚úÖ Campo ${campo} adicionado`);
      }
    }
    
    // Criar tabela lgpd_audit se n√£o existir
    if (!auditTableResult.rows[0].exists) {
      console.log('üîß Criando tabela lgpd_audit...');
      await client.query(`
        CREATE TABLE lgpd_audit (
          id SERIAL PRIMARY KEY,
          user_id INTEGER REFERENCES users(id),
          action VARCHAR(50) NOT NULL,
          details JSONB,
          ip_address INET,
          user_agent TEXT,
          created_at TIMESTAMP DEFAULT NOW()
        )
      `);
      console.log('   ‚úÖ Tabela lgpd_audit criada');
    }
    
    // Criar √≠ndices para performance
    console.log('üîß Criando √≠ndices de performance...');
    try {
      await client.query('CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)');
      await client.query('CREATE INDEX IF NOT EXISTS idx_products_active ON products(active)');
      await client.query('CREATE INDEX IF NOT EXISTS idx_lgpd_audit_user_id ON lgpd_audit(user_id)');
      console.log('   ‚úÖ √çndices criados');
    } catch (error) {
      console.log('   ‚ö†Ô∏è Alguns √≠ndices j√° existem');
    }
    
    // 7. Atualizar produtos com imagens se necess√°rio
    console.log('üîß Verificando imagens dos produtos...');
    const productsWithoutImages = await client.query(`
      SELECT id, name FROM products 
      WHERE active = true AND (image IS NULL OR image = '')
      LIMIT 5
    `);
    
    if (productsWithoutImages.rows.length > 0) {
      console.log('   üìù Atualizando produtos sem imagens...');
      const imageMap = {
        'Brigadeiro': 'dish.png',
        'Beijinho': 'dish2.png',
        'Bolo de Chocolate': 'dish3.png',
        'Torta de Lim√£o': 'dish4.png'
      };
      
      for (const product of productsWithoutImages.rows) {
        const image = imageMap[product.name] || 'dish.png';
        await client.query('UPDATE products SET image = $1 WHERE id = $2', [image, product.id]);
        console.log(`   ‚úÖ Produto ${product.name} atualizado com imagem ${image}`);
      }
    }
    
    console.log('');
    
    // 8. Teste final
    console.log('7Ô∏è‚É£ Realizando teste final...');
    
    // Testar inser√ß√£o de usu√°rio
    try {
      const testUserResult = await client.query(`
        INSERT INTO users (name, email, password, phone, consent_marketing, consent_third_party, active)
        VALUES ($1, $2, $3, $4, $5, $6, $7)
        RETURNING id, name, email
      `, [
        'Teste Sistema',
        'teste@sistema.com',
        '$2a$12$test.hash.for.testing',
        '(11) 99999-9999',
        true,
        false,
        true
      ]);
      
      console.log('‚úÖ Teste de inser√ß√£o de usu√°rio: SUCESSO');
      console.log(`   üë§ Usu√°rio criado: ${testUserResult.rows[0].name} (ID: ${testUserResult.rows[0].id})`);
      
      // Limpar usu√°rio de teste
      await client.query('DELETE FROM users WHERE email = $1', ['teste@sistema.com']);
      console.log('   üßπ Usu√°rio de teste removido');
      
    } catch (error) {
      console.log('‚ùå Teste de inser√ß√£o de usu√°rio: FALHOU');
      console.log(`   Erro: ${error.message}`);
    }
    
    // Verificar produtos novamente
    const finalProductsResult = await client.query('SELECT COUNT(*) as total FROM products WHERE active = true');
    console.log(`‚úÖ Total final de produtos: ${finalProductsResult.rows[0].total}`);
    
    console.log('');
    console.log('üéâ DIAGN√ìSTICO COMPLETO FINALIZADO');
    console.log('====================================');
    console.log('‚úÖ Sistema verificado e corrigido');
    console.log('‚úÖ Campos LGPD adicionados');
    console.log('‚úÖ Tabela de auditoria criada');
    console.log('‚úÖ √çndices de performance criados');
    console.log('‚úÖ Produtos com imagens atualizados');
    console.log('‚úÖ Teste de inser√ß√£o realizado com sucesso');
    console.log('');
    console.log('üöÄ O sistema est√° pronto para uso!');
    
  } catch (error) {
    console.error('‚ùå ERRO NO DIAGN√ìSTICO:', error);
    console.error('Detalhes:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

// Executar diagn√≥stico
diagnosticoCompleto().catch(console.error); 